//精典 Inheritance
//Classical inheritance 


var Role = function() {
    this.name = "lala"
}

var Npc = function(name,msg) {
    Role.call(this, name);
    this.msg = msg;
}

Npc.protptype = new  Role();
Npc.prototype.constructor = Npc;
Npc.prototype.talk  = function(){
	alert(this.msg);
}

封裝

function extend(subClass, superClass) {
    var F = function() {};//原始
    F.prototype = superClass.prototype;
    subClass.prototype = new F();
    subClass.prototype.constructor = subClass;
}



//prototype 式 
//直接改寫整個 prototype 的內容 

function createObject(object) {
    // function F() {}
    // F.prototype = object;
    // return new F;
    var f = Object.create(object);//前三行同等這一行
    f.data = object._initData();//初始化資料

    return f;
}


var Role = {
	_initData: function(){
		var _this = this;
		if(_this.data.length > 0 ) {
			throw new Error('不要重複初始化資料');
		}

		return {
			name: 'defaultName'
		}
	},
	getName: function(){
		alert(this.name);
	}

};

var NPC = creatObject();







